#!/usr/bin/perl

use strict;
use Getopt::Long;
use Pod::Usage;
use Term::Complete;
use File::BaseDir qw(config_home config_dirs);
use File::Path "make_path";
use File::Copy "move";
use Path::Class;

=pod

=head1 NAME

createpass - Create derivating passwords from a master one

=head1 SYNOPSIS

createpass [options]

=cut

my $man = 0;
my $help = 0;
my $twice = 0;
my $batch = 0;
my $visible = 0;
my $length = 8;
my $master;
my $domain;
my $user;
my $info;
my $algo="SHA-512";

=pod

=head1 OPTIONS

=over 8

=item B<--man>
Prints the manual page and exits.

=item B<--help>
Print a brief help message and exits.

=item B<--length>
num length of generated password (default 8)

=item B<--master str>
master password (required)

=item B<--user str>
user to target

=item B<--domain str>
domain to target

=item B<--info str>
info to target

=item B<--algo str>
algo to use to hash the password (default to SHA-512)

=item B<--twice>
prompt password twice

=item B<--batch>
batch mode: generate several passwords with one master


=item B<--visible>
print generated password to screen instead of copying it to clipboard

=back

=cut

my @USERS=('');
my @DOMAINS=('');
my @INFOS=('');

sub migrateOldConf() {
    my $xdg_conffile=config_home('passtools', 'config.rc');
    my $old_conffile=file($ENV{"HOME"},'.passtools.rc');

    if (-e $old_conffile && ! -e $xdg_conffile) {
	print STDERR "Moving old conffile to XDG compliant path\n",
	    "('$old_conffile' => '$xdg_conffile')\n";
	make_path(config_home('passtools'));
	move($old_conffile, $xdg_conffile) or
	    die "Cannot rename $old_conffile into $xdg_conffile: $!";
    }
}

# Read configuration file
sub readConf() {
    my @confdirs=config_dirs('passtools');
    my $confFile;
    foreach my $dir (@confdirs) {
	$confFile=file($dir, 'config.rc');
	my $st=$confFile->stat;
	if ( $st && -r $st ) {
	    last;
	}
	$confFile=undef;
    }
    if (not defined($confFile)){
        return "No config file";
    }
    # Put config data into a separate namespace
    # Process the contents of the config file
    our $err;
    {
        package CFG;
        my $rc = do($confFile);
        # Check for errors
        if ($@) {
            $::err = "ERROR: Failure compiling '$confFile' - $@";
        } elsif (! defined($rc)) {
            $err = "ERROR: Failure reading '$confFile' - $!";
        } elsif (! $rc) {
            $::err = "ERROR: Failure processing '$confFile'";
        }
    }
    if($err){
        print(STDERR $err,"\n");
        exit(1);
    }
    # Update config
    @USERS=@{$CFG::CFG{'USERS'}};
    @DOMAINS=@{$CFG::CFG{'DOMAINS'}};
    @INFOS=@{$CFG::CFG{'INFOS'}};
    $length=$CFG::CFG{'length'};
    $batch=$CFG::CFG{'batch'};
    $twice=$CFG::CFG{'twice'};
    $visible=$CFG::CFG{'visible'};
    $algo=$CFG::CFG{'algo'};
}
migrateOldConf();
readConf();

my $opts={
	'man' => \$man,
	'help'=> \$help,
	'length' => \$length,
	'master' => \$master,
	'domain' => \$domain,
	'user' => \$user,
	'info' => \$info,
	'algo' => \$algo,
    'twice'=> \$twice,
    'batch' => \$batch,
    'visible' => \$visible,
};

GetOptions($opts, 'help|h', 'man', 'length=i', 'master=s', 'rules=s',
	'domain=s', 'info=s', 'algo=s', 'user=s', 'twice|t','batch|b', 'visible|v',
	 ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

sub getpass($) {
	my $prompt=shift;
	$|=1; #Turn on AutoFlush
	use Term::ReadKey;

	print "$prompt";
	ReadMode('noecho');
	ReadMode('raw');
	my $pass = '';

	while (1) {
		my $c;
		1 until defined($c = ReadKey(-1));
		last if $c eq "\n";
		print "*";
		$pass .= $c;
	}

	ReadMode('restore');
	print "\n";
	return $pass;
}

sub compute_pass($$) {
	my $master=shift;
	my $part=shift;

	my $combined=$master."\n".$part."\n";

	if (uc($algo) eq 'MD5SUM') {
		use Digest::MD5 qw(md5_base64);
		$combined=md5_base64($combined);
	} else {
		use Digest::SHA;
		#print "algo: $algo\n";
		my $d=Digest::SHA->new($algo);
		$d->add($combined);
		$combined=$d->b64digest();
	}
	return $combined;
}

sub generate_pass($){
    my $master=shift;

    if (defined($user)) {
    	$master=compute_pass($master, $user);
    }
    if (defined($domain)) {
    	$master=compute_pass($master, $domain);
    }
    if (defined($info)) {
    	$master=compute_pass($master, $info);
    }

    $master=substr($master, 1, $length);
    return $master
}

sub get_input($$@){
    my $ret=shift;
    my $name=shift;
    my @COMPL=shift;
    my $line= Complete("$name [$ret] : ",@COMPL);
    chomp($line);
    unless ($line eq ""){$ret=$line;};
    return $ret;
}

sub set_master(){
    if (!defined($master)) {
    	my ($pass1, $pass2);
    	while(1) {
    		$pass1=getpass("Master password : ");
            last if( $twice eq 0);
    		$pass2=getpass("Master password again : ");
    		last if ($pass1 eq $pass2);
    		print "Different password, try again\n";
    	}
    	$master=$pass1;
    }
}

my $continue=0;
while($continue ge 0){
    if($user eq "" || $domain eq ""  || $continue > 0){
        $user=get_input($user, "Username", \@USERS);
        $domain=get_input($domain, "Domain", \@DOMAINS);
        $info=get_input($info, "Info", \@INFOS);
    }
    set_master();
    if($visible eq 0){
        print "Password copied to clipboard, use middle click to paste it.\n";
        my $pid=fork();
        if($pid eq 0){
            open PIPE, "| xclip -verbose";
            print PIPE generate_pass($master);
            close(PIPE);
        }else{
            my $old=$SIG{INT};
            $SIG{INT} = sub { print "\n"; };
            wait;
            $SIG{INT}=$old;
        }
    }else{
        print generate_pass($master), "\n";
    }
    if($batch eq 0){
        $continue=-1;
    }else{
        $continue++;
        print "Exit batch mode [Y/n] : ";
        my $answer=<STDIN>;
        unless ($answer =~ /^[Nn][Oo]?$/){$continue=-1;};
    }
}
__END__

=pod

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut

